Features:

Database => HTTP Methods
========    ============
Create          POST
Retrieve        GET
Update          PUT
Delete          DELETE 

## API Endpoints

=> POST http://127.0.0.1:5000/api/doLogin/

Parameters:

-email : required: Email of the registered user
-psw : required: Password of the registered user

eg Payload:
{
    "email" : "your email",
    "psw" : "your password"
}

Response:

- loggedin: Returns True or False based on login status
- message: A message after login is attempted
- token: A token to be used for authorization

=> POST http://127.0.0.1:5000/api/doRegister/

=> GET http://127.0.0.1:5000/api/treks/

Response: JSON

=> POST http://127.0.0.1:5000/api/doAddTrek/

Parameters:

-title : required: text: Title of the trek
-days : required: number:  Number of days required for the trek 
-difficulty : required: text: Difficulty Level
-total_cost : required: number: Total Cost
-token : Token for user authorization

eg Payload:
{
    "title" : "title",
    "days" : <days>,
    "difficulty" : "difficulty level",
    "total_cost" : <total_cost>,
    "token": "token"
}

Response:

- message: A message after trek addition is attempted

### API Endpoints

1. Register => POST -/api/doRegister
2. Login => POST - /api/doLogin
3. All Treks => GET - /api/treks
4. Add Trek => POST - /api/doAddTrek
5. Update Trek => PUT - /api/doUpdateTrek
6. Delete Trek => DELETE - /api/doDeleteTrek

# REST Framework

Resource: Trek

1. All Treks => /api/treks => GET
2. Add Treks => /api/treks => POST
3. Update Trek => /api/treks => PUT
4. Delete Trek => /api/treks => DELETE